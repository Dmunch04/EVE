'scopeName': 'source.eve'
'name': 'Eve'
'fileTypes': ['eve']

'patterns': [
  {
    'name': 'meta.section.eve'
    'contentName': 'markup.other.section.eve'
    'begin': '(\\[)'
    'beginCaptures':
      1: 'name': 'support.function.section.eve'
      2: 'name': 'punctuation.definition.function.eve'
      3: 'name': 'punctuation.definition.begin.eve'
    'end': '(\\])'
    'endCaptures':
      0: 'punctuation.definition.end.eve'
      1: 'name': 'support.function.section.eve'
    'patterns': [
      {
        'include': '#CommentLine'
      },

      {
        'include': '#String'
      },

      {
        'include': '#DString'
      },

      {
        'include': '#Colons'
      },

      {
        'include': '#Number'
      },

      {
        'include': '#List'
      },

      {
        'include': '#Bools'
      },

      {
        'include': '#Define'
      }

      {
        'include': '#EOF'
      }
    ]
  },

  {
    'include': '#CommentLine'
  },

  {
    'include': '#EOS'
  },

  {
    'include': '#EOF'
  },

  {
    'include': '#Section'
  }
]

repository:
  CommentLine:
    {
      'match': '@.*$'
      'name': 'comment.line.eve'
    }
  String:
    {
      'begin': '\''
      'beginCaptures':
          '0':
              'name': 'punctuation.definition.string.begin.eve'
      'end': '\''
      'endCaptures':
          '0':
              'name': 'punctuation.definition.string.end.eve'
      'name': 'string.quoted.single.eve'
      'patterns': [
          {
              'match': '\''
              'name': 'constant.character.escape.eve'
          }
      ]
    }
  DString:
    {
      'begin': '\"'
      'beginCaptures':
          '0':
              'name': 'punctuation.definition.string.begin.eve'
      'end': '\"'
      'endCaptures':
          '0':
              'name': 'punctuation.definition.string.end.eve'
      'name': 'string.quoted.double.eve'
      'patterns': [
          {
              'match': '\"'
              'name': 'constant.character.escape.eve'
          }
      ]
    }
  Colons:
    {
      'match': '::'
      'name': 'variable.other.eve'
    }
  Number:
    {
      'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
      'name': 'constant.numeric.eve'
    }
  EOS:
    {
      'match': '(\\])'
      'name': 'constant.numeric.eve'
    }
  EOF:
    {
      'match': '(\\;)'
      'name': 'constant.numeric.eve'
    }
  Define:
    {
      'begin': '\\{'
      'end': '\\}'
      'name': 'constant.numeric.eve'
      'patterns': [
        {
          'include': '#Text'
        },

        {
          'match': '.'
          'name': 'entity.name.function.eve'
        }
      ]
    }
  Text:
    {
      'match': '\\b[a-zA-Z_].*$\\b'
      'name': 'constant.numeric.eve'
    }
  List:
    {
      'begin': '\\('
      'end': '\\)'
      'name': 'variable.other.eve'
      'patterns': [
        {
          'include': '#CommentLine'
        },

        {
          'include': '#Colons'
        },

        {
          'include': '#Number'
        },

        {
          'include': '#String'
        },

        {
          'include': '#DString'
        },

        {
          'include': '#Text'
        },

        {
          'include': '#Bools'
        }
      ]
    }
  Bools:
    {
      'match': '\\b(True|true|False|false)\\b'
      'name': 'keyword.control.eve'
    }
